{"version":3,"sources":["components/DataStucture/DataStructure.js","components/DisplayTable/DisplayTable.js","components/BaseCalculator/BaseCalculator.js","helpers/FormatHelper.js","helpers/HypertensionHelper.js","components/HypertensionCalculator/HypertensionCalculator.js","helpers/KidneyDiseaseHelper.js","components/KidneyDiseaseCalculator/KidneyDiseaseCalculator.js","components/Navigation/Navigation.js","components/App/App.js","index.js"],"names":["DataStructure","props","component","definition","this","className","Typography","variant","Card","color","String","fromCharCode","React","Component","DisplayTable","tableColumns","columns","tableRows","rows","row","map","column","index","TableCell","field","toString","TableContainer","Paper","Table","aria-label","TableHead","TableRow","headerName","TableBody","createRow","BaseCalculator","state","userInput","inputData","processedData","errorMessages","displayData","handleChange","bind","clearTable","event","setState","target","value","onSubmit","handleSubmit","FormControl","TextField","label","id","type","onChange","multiline","Button","onClick","length","message","componentName","JSONFormatter","input","strToReplace","forEach","n","replaceStrings","JSON","parse","err","find","replace","split","join","compare","a","b","atDate","calculateHypertensionClassification","SysBP","DiaBP","HypertensionCalculator","width","preventDefault","outcome","current","_","isInteger","push","moment","isValid","AnalyseInputData","sort","classification","AnalyseHypertensionData","generateBody","calculateKidneyDiseaseClassification","eGFR","KidneyDiseaseCalculator","last","oldNumber","percent","dropflag","toFixed","AnalyseKidneyDiseaseData","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","a11yProps","App","useState","setValue","AppBar","position","Tabs","newValue","Tab","data-testid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c8d87b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n/**\r\n * A class that displays the input information for Hypertension and Kidney Disease calculators\r\n */\r\nclass DataStructure extends React.Component {\r\n\tcomponent = \"\";\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.component = props.definition;\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.component === \"hypertension\"){\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"data-example-container\">\r\n\t\t\t\t\t<Typography className=\"data-example-title\" variant=\"h6\" component=\"h1\">\r\n\t\t\t\t\t\tHere are some examples of the input data format:\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 180, DiaBP: 120, atDate: '2020/08/09' {String.fromCharCode('125')}</span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 200, DiaBP: 140, atDate: '2020/04/05' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 100, DiaBP: 100, atDate: '2020/08/01' {String.fromCharCode('125')} </span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 179, DiaBP: 109, atDate: '2019/09/09' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 181, DiaBP: 121, atDate: '2020/12/25' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}SysBP: 50, DiaBP: 50, atDate: '2021/02/14' {String.fromCharCode('125')} </span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\r\n\t\t\t\t\t<Typography className=\"data-example-title\" variant=\"h6\" component=\"h1\">\r\n\t\t\t\t\t\tAddition input information:\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>All records (information between {} brackets) must seperated by a comma.</span>\r\n\t\t\t\t\t\t\t<span>Date format must be in the form 'YYYY/DD/MM'</span>\r\n\t\t\t\t\t\t\t<span>SysBP and DiaBP values must both be integers</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif(this.component === \"kidneydisease\"){\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"data-example-container\">\r\n\t\t\t\t\t<Typography className=\"data-example-title\" variant=\"h6\" component=\"h1\">\r\n\t\t\t\t\t\tHere are some examples of the input data format:\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 91, atDate: '2020/11/08' {String.fromCharCode('125')}</span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 14.1, atDate: '2021/01/01' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 85, atDate: '2019/05/23' {String.fromCharCode('125')} </span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>[</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 82.3, atDate: '1997/10/05' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 14, atDate: '2020/04/05' {String.fromCharCode('125')},</span>\r\n\t\t\t\t\t\t\t<span>{String.fromCharCode('123')}eGFR: 71.6, atDate: '2019/09/09' {String.fromCharCode('125')} </span>\r\n\t\t\t\t\t\t\t<span>]</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\r\n\t\t\t\t\t<Typography className=\"data-example-title\" variant=\"h6\" component=\"h1\">\r\n\t\t\t\t\t\tAddition input information:\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Card className=\"example\">\r\n\t\t\t\t\t\t<Typography className=\"example-content\" color=\"textSecondary\">\r\n\t\t\t\t\t\t\t<span>All records (information between {} brackets) must seperated by a comma.</span>\r\n\t\t\t\t\t\t\t<span>Date format must be in the form 'YYYY/DD/MM'.</span>\r\n\t\t\t\t\t\t\t<span>eGFR value must be integer or float value.</span>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t//Default\r\n\t\treturn('')\r\n\t}\r\n}\r\n\r\nexport default DataStructure;\r\n","import React from 'react';\n\n//Table Imports\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nclass DisplayTable extends React.Component {\n\ttableColumns;\n\ttableRows;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.tableColumns = props.columns;\n\t\tthis.tableRows = props.rows;\n\t}\n\n\tcreateRow(row){\n\t\treturn (\n\t\t\tthis.tableColumns.map((column, index) => (\n\t\t\t\t<TableCell key={index.toString()}>{row[column.field]}</TableCell>\n\t\t\t))\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"table-container\">\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table className=\"table\" aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow key={0}>\n\t\t\t\t\t\t\t\t{ this.tableColumns.map((column, index) => (\n\t\t\t\t\t\t\t\t\t<TableCell key={index.toString()}>{column.headerName}</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.tableRows.map((row, index) => (\n\t\t\t\t\t\t\t\t\t<TableRow key={index.toString()}>\n\t\t\t\t\t\t\t\t\t\t{this.createRow(row)}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default DisplayTable;\n","import React from 'react';\r\n\r\n//Styles\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\n//Data display\r\nimport DataStructure from '../DataStucture/DataStructure';\r\nimport DisplayTable from '../DisplayTable/DisplayTable'\r\n\r\n\r\nclass BaseCalculator extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tuserInput: '',\r\n\t\t\tinputData: [],\r\n\t\t\tprocessedData: [],\r\n\t\t\terrorMessages: [],\r\n\t\t\tdisplayData: false\r\n\t\t};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.clearTable = this.clearTable.bind(this);\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tthis.setState({\r\n\t\t\tuserInput: event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tclearTable() {\r\n\t\tthis.setState({\r\n\t\t\tuserInput: '',\r\n\t\t\tinputData: [],\r\n\t\t\tprocessedData: [],\r\n\t\t\terrorMessages: [],\r\n\t\t\tdisplayData: false\r\n\t\t});\r\n\t}\r\n\r\n\tgenerateBody() {\r\n\t\treturn (\r\n\t\t\t<div className=\"calculator-content-container\">\r\n\t\t\t\t<div className=\"left\">\r\n\t\t\t\t\t<div className=\"data-input\">\r\n\t\t\t\t\t\t<form className=\"input-form\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl variant=\"outlined\" className=\"input-container\">\r\n\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\tlabel='Input Data'\r\n\t\t\t\t\t\t\t\t\tid='inputArray'\r\n\t\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.userInput}\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\tmultiline\r\n\t\t\t\t\t\t\t\t\trows={6}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t<Button type='submit'>\r\n\t\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button onClick={this.clearTable}>\r\n\t\t\t\t\t\t\t\tClear\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.errorMessages.length > 0 || this.state.userInput === false ?\r\n\t\t\t\t\t\t\t<div className=\"error-message-container\">\r\n\t\t\t\t\t\t\t\t<Card className=\"error-messages\" variant=\"outlined\">\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.state.errorMessages.map((message) =>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{message}</span>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</div> : ''\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t<div className=\"data-structure\">\r\n\t\t\t\t\t\t<DataStructure definition={this.state.componentName}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.displayData !== false ?\r\n\t\t\t\t\t\t\t<div className=\"results-container\">\r\n\t\t\t\t\t\t\t\t<DisplayTable columns={this.columns} rows={this.state.processedData}/>\r\n\t\t\t\t\t\t\t</div> :\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BaseCalculator;\r\n","/**\r\n * Takes the input from the user and returns it in an JSON array\r\n *\r\n * @param input - the user input\r\n * @param strToReplace - an array of strings to replace in the object\r\n *\r\n * @returns {boolean|any} if conversion is successful, returns a JSON array of the user input,\r\n * \t\t\tfalse otherwise.\r\n */\r\nexport const JSONFormatter = (input, strToReplace) => {\r\n\ttry {\r\n\t\tstrToReplace.forEach((n) => {\r\n\t\t\tinput = replaceStrings(input, n, '\"' + n + '\"');\r\n\t\t});\r\n\r\n\t\t// also format the ''s around the date\r\n\t\tinput = replaceStrings(input, '\\'', '\"');\r\n\t\treturn JSON.parse(input)\r\n\t} catch (err) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Had to build this function for testing as Node doesn't support replaceAll JS function that browsers do\r\n *\r\n * @param input - string\r\n * @param find - find this in input\r\n * @param replace - replace find with this\r\n */\r\nfunction replaceStrings(input, find, replace) {\r\n\treturn input.split(find).join(replace)\r\n}\r\n\r\n/**\r\n * Compare function used to sort array data by atDate variable\r\n */\r\nexport function compare( a, b ) {\r\n\tif ( a.atDate < b.atDate ){\r\n\t\treturn -1;\r\n\t}\r\n\tif ( a.atDate > b.atDate ){\r\n\t\treturn 1;\r\n\t}\r\n\treturn 0;\r\n}\r\n","import _ from 'lodash';\r\nimport moment from \"moment\";\r\nimport {compare} from \"./FormatHelper\";\r\n\r\n/**\r\n * Validates the input data for a Hypertension classification\r\n *\r\n * Notes: SysBP & and DiaBP both must be integers (numbers), and atDate must a be valid date\r\n *\r\n * @param input - An array of objects in the form [{sysBP: 00, diaBP: 00, atData: YYYY/MM/DD}]\r\n *\r\n * @returns {array} - empty array if successful, error messages if unsuccessful\r\n *\r\n */\r\nexport const AnalyseInputData = (input) => {\r\n\tlet outcome = [];\r\n\ttry {\r\n\t\tinput.forEach((current) => {\r\n\t\t\t// Check SysBP is an integer\r\n\t\t\tif(!_.isInteger(current.SysBP)) {\r\n\t\t\t\toutcome.push(current.SysBP + \" is not a valid SysBP reading!\");\r\n\t\t\t}\r\n\t\t\t// Check DiaBP is an integer\r\n\t\t\tif(!_.isInteger(current.DiaBP)) {\r\n\t\t\t\toutcome.push(current.DiaBP + \" is not a valid DiaBP reading!\");\r\n\t\t\t}\r\n\t\t\t// Check date is valid and in the form YYYY/MM/DD\r\n\t\t\tif(!moment(current.atDate, 'YYYY/MM/DD',true).isValid()){\r\n\t\t\t\toutcome.push(current.atDate + \" is not a valid Date!\");\r\n\t\t\t}\r\n\t\t})\r\n\t} catch (err) {\r\n\t\treturn [\"There's an issue with the data you input. Please make sure it's in the correct input format, detailed below.\"]\r\n\t}\r\n\treturn outcome;\r\n}\r\n\r\n/**\r\n *\r\n * @param input\r\n * @returns {boolean|AnalyseHypertensionData.props}\r\n * @constructor\r\n */\r\nexport const AnalyseHypertensionData = (input) => {\r\n\ttry {\r\n\t\tinput.sort(compare);\r\n\r\n\t\tinput.forEach((n) => {\r\n\t\t\tn.classification = calculateHypertensionClassification(n.SysBP, n.DiaBP);\r\n\t\t});\r\n\t\treturn input\r\n\t} catch (err) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Takes the SysBP and DiaBP variables from the user input and returns a classification based on these values.\r\n *\r\n * @param SysBP - The SysBP for the current record\r\n * @param DiaBP - The SysBP for the current record\r\n *\r\n * @returns {string} - Returns the Hypertension classification for the given SysBP and DiaBP fields\r\n */\r\nexport const calculateHypertensionClassification = (SysBP, DiaBP) => {\r\n\tif((SysBP >= 180) && (DiaBP >= 120)) {\r\n\t\treturn \"Stage 3\";\r\n\t} else if (((180 > SysBP) && (SysBP >= 160)) && ((110 > DiaBP) && (DiaBP >= 100))) {\r\n\t\treturn \"Stage 2\";\r\n\t} else if (((160 > SysBP) && (SysBP  >= 140)) && ((100 > DiaBP) && (DiaBP >= 90))) {\r\n\t\treturn \"Stage 1\";\r\n\t} else {\r\n\t\treturn \"No Hypertension\";\r\n\t}\r\n}\r\n","// This class extends the BaseCalculator\nimport BaseCalculator from '../BaseCalculator/BaseCalculator';\n\n//helpers\nimport {JSONFormatter} from '../../helpers/FormatHelper';\nimport {AnalyseInputData, AnalyseHypertensionData} from '../../helpers/HypertensionHelper'\n\nclass HypertensionCalculator extends BaseCalculator {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcomponentName: 'hypertension',\n\t\t\tuserInput: '',\n\t\t\tinputData: [],\n\t\t\tprocessedData: [],\n\t\t\terrorMessages: [],\n\t\t\tdisplayData: false,\n\t\t};\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tthis.setState({\n\t\t\tdisplayData: false,\n\t\t\tinputData: [],\n\t\t\terrorMessages: [],\n\t\t\tprocessedData: [],\n\t\t});\n\n\t\tlet inputData = JSONFormatter(this.state.userInput, ['SysBP', 'DiaBP', 'atDate']);\n\t\tlet errorMessages = AnalyseInputData(inputData);\n\t\tlet processedData = AnalyseHypertensionData(inputData);\n\n\t\tthis.setState({\n\t\t\tinputData: inputData,\n\t\t\terrorMessages: errorMessages,\n\t\t\tprocessedData: processedData\n\t\t}, () => {\n\t\t\tif(this.state.errorMessages.length === 0){\n\t\t\t\tthis.setState({\n\t\t\t\t\tdisplayData: true\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// Used as an input for the Display Table\n\tcolumns = [\n\t\t{ field: 'SysBP', headerName: 'SysBP', width: 70 },\n\t\t{ field: 'DiaBP', headerName: 'DiaBP', width: 70},\n\t\t{ field: 'atDate', headerName: 'Date', width: 70},\n\t\t{ field: 'classification', headerName: 'Classification', width: 70}\n\t];\n\n\trender() {\n\t\treturn this.generateBody();\n\t}\n}\n\nexport default HypertensionCalculator;\n","import moment from \"moment\";\r\n\r\nimport {compare} from \"./FormatHelper\";\r\n\r\n/**\r\n * Ensures that the incoming data object has the correct data types\r\n *\r\n * @param input - the data to be verified\r\n * @returns [] - an empty array if successful, an array of error messages otherwise\r\n *\r\n */\r\nexport const AnalyseInputData = (input) => {\r\n\tlet outcome = [];\r\n\ttry {\r\n\t\tinput.forEach((current) => {\r\n\t\t\tif(typeof(current.eGFR) !== 'number') {\r\n\t\t\t\toutcome.push(current.eGFR + \" is not a valid eGFR reading!\");\r\n\t\t\t}\r\n\t\t\tif(!moment(current.atDate, 'YYYY/MM/DD',true).isValid()){\r\n\t\t\t\toutcome.push(current.atDate + \" is not a valid Date!\");\r\n\t\t\t}\r\n\t\t})\r\n\t} catch (err) {\r\n\t\treturn [\"There's an issue with the data you input. Please make sure it's in the correct input format, detailed below.\"]\r\n\t}\r\n\treturn outcome;\r\n}\r\n\r\n/**\r\n * A function that loops through the input array and returns a new object if classified properly, false otherwise\r\n *\r\n * @param input - the user input data\r\n * @returns {AnalyseKidneyDiseaseData.props|boolean}\r\n * @constructor\r\n */\r\nexport const AnalyseKidneyDiseaseData = (input) => {\r\n\ttry {\r\n\t\t//sort the input by date\r\n\t\tinput.sort(compare);\r\n\r\n\t\tlet last = 0;\r\n\r\n\t\tinput.forEach((n) => {\r\n\t\t\tlet percent = getPercentageChange(last, n.eGFR);\r\n\t\t\tpercent >= 20 ? n.dropflag = percent.toFixed(2) + '% drop detected since previous test' : n.dropflag = '';\r\n\t\t\tn.classification = calculateKidneyDiseaseClassification(n.eGFR);\r\n\r\n\t\t\tlast = n.eGFR;\r\n\t\t});\r\n\r\n\t\treturn input\r\n\t} catch (err) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Calculates in percent, the change between 2 numbers.\r\n * e.g from 1000 to 500 = 50%\r\n *\r\n * @param oldNumber The initial value\r\n * @param newNumber The value that changed\r\n */\r\nfunction getPercentageChange(oldNumber, newNumber){\r\n\tvar decreaseValue = oldNumber - newNumber;\r\n\r\n\treturn (decreaseValue / oldNumber) * 100;\r\n}\r\n\r\n/**\r\n * Takes the eGFR value and returns a classification\r\n *\r\n * @param eGFR - The eGFR classification to be determined\r\n * @returns {string} - The classification\r\n */\r\nexport const calculateKidneyDiseaseClassification = (eGFR) => {\r\n\tif(eGFR >= 90) {\r\n\t\treturn \"Normal\";\r\n\t} else if (89 >= eGFR && eGFR >= 60) {\r\n\t\treturn \"Mildly Decreased\"\r\n\t} else if (59 >= eGFR && eGFR >= 45 ) {\r\n\t\treturn \"Mild to Moderate\";\r\n\t} else if (44 >= eGFR && eGFR >= 30) {\r\n\t\treturn \"Moderate to Severe\";\r\n\t} else if (29 >= eGFR && eGFR >= 15) {\r\n\t\treturn \"Severely Decreased\"\r\n\t} else {\r\n\t\treturn \"Kidney Failure\";\r\n\t}\r\n}\r\n","// This class extends the BaseCalculator\nimport BaseCalculator from '../BaseCalculator/BaseCalculator';\n\n//helpers\nimport {JSONFormatter} from '../../helpers/FormatHelper';\nimport {AnalyseInputData, AnalyseKidneyDiseaseData} from \"../../helpers/KidneyDiseaseHelper\";\n\nclass KidneyDiseaseCalculator extends BaseCalculator {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcomponentName: 'kidneydisease',\n\t\t\tuserInput: '',\n\t\t\tinputData: [],\n\t\t\tprocessedData: [],\n\t\t\terrorMessages: [],\n\t\t\tdisplayData: false\n\t\t};\n\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tthis.setState({\n\t\t\tdisplayData: false,\n\t\t\tinputData: [],\n\t\t\terrorMessages: [],\n\t\t\tprocessedData: []\n\t\t});\n\n\t\tlet inputData = JSONFormatter(this.state.userInput, ['eGFR', 'atDate']);\n\t\tlet errorMessages = AnalyseInputData(inputData);\n\t\tlet processedData = AnalyseKidneyDiseaseData(inputData);\n\n\t\tthis.setState({\n\t\t\tinputData: inputData,\n\t\t\terrorMessages: errorMessages,\n\t\t\tprocessedData: processedData\n\t\t}, () => {\n\t\t\tif(this.state.errorMessages.length === 0){\n\t\t\t\tthis.setState({\n\t\t\t\t\tdisplayData: true\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\t}\n\n\t// Used as an input for the Display Table\n\tcolumns = [\n\t\t{field: 'eGFR', headerName: 'eGFR', width: 70},\n\t\t{field: 'atDate', headerName: 'Date', width: 70},\n\t\t{field: 'classification', headerName: 'Classification', width: 70},\n\t\t{field: 'dropflag', headerName: 'Large Drop Detected', width: 70},\n\t];\n\n\trender() {\n\t\treturn this.generateBody();\n\t}\n}\n\nexport default KidneyDiseaseCalculator;\n","import React from \"react\";\r\n// Navigation pane sourced from React docs, https://material-ui.com/components/tabs/\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport function TabPanel(props) {\r\n\tconst { children, value, index, ...other } = props;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\trole=\"tabpanel\"\r\n\t\t\thidden={value !== index}\r\n\t\t\tid={`simple-tabpanel-${index}`}\r\n\t\t\taria-labelledby={`simple-tab-${index}`}\r\n\t\t\t{...other}\r\n\t\t>\r\n\t\t\t{value === index && (\r\n\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t<Typography component={'span'}>{children}</Typography>\r\n\t\t\t\t</Box>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport function a11yProps(index) {\r\n\treturn {\r\n\t\tid: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}`,\r\n\t};\r\n}\r\n","import React from 'react';\r\n\r\n//Styles\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\n// Components\r\nimport HypertensionCalculator from \"../HypertensionCalculator/HypertensionCalculator\";\r\nimport KidneyDiseaseCalculator from \"../KidneyDiseaseCalculator/KidneyDiseaseCalculator\";\r\n\r\n// Navigation\r\nimport {TabPanel, a11yProps} from \"../Navigation/Navigation\";\r\n\r\nconst App = () => {\r\n\tconst [value, setValue] = React.useState(0);\r\n\r\n\tconst handleChange = (event, newValue) => {\r\n\t\tsetValue(newValue);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='app-container'>\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n\t\t\t\t\t<Tab label=\"Hypertension Calculator\" data-testid=\"hypertension-navigation\" {...a11yProps(0)} />\r\n\t\t\t\t\t<Tab label=\"Kidney Disease Calculator\" data-testid=\"kidney-disease-navigation\" {...a11yProps(1)} />\r\n\t\t\t\t</Tabs>\r\n\t\t\t</AppBar>\r\n\t\t\t<TabPanel value={value} index={0}>\r\n\t\t\t\t<HypertensionCalculator/>\r\n\t\t\t</TabPanel>\r\n\t\t\t<TabPanel value={value} index={1}>\r\n\t\t\t\t<KidneyDiseaseCalculator/>\r\n\t\t\t</TabPanel>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}